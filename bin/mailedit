#!/bin/perl -w

use Arachsys::A2 qw(checkdomain checkip checkdomainuser checkipuser);
use File::Temp;
use File::Basename;
use Getopt::Std;
use Term::ReadKey;
use strict;

my $editor = $ENV{VISUAL} || $ENV{EDITOR} || "vi";
my $privileged = $< == 0;

sub confirm() {
  ReadMode 'cbreak';
  my $key = ReadKey(0);
  ReadMode 'normal';
  return lc $key eq 'y' ? 1 : 0;
}

sub usage() {
  print STDERR <<EOF;
Usage:  $0 DOMAIN  edit addresses for DOMAIN
        $0 -a      edit all of your addresses
        $0 -p IP   edit SMTP AUTH credentials for IP
EOF
  exit 1;
}

sub HELP_MESSAGE { usage; }
sub VERSION_MESSAGE { usage; }

$SIG{__DIE__} = sub { die "$0: $_[0]"; };
$SIG{__WARN__} = sub { warn "$0: $_[0]"; };
$SIG{INT} = $SIG{TERM} = sub { exit 1; };

$0 = basename $0;
umask 0077;

my %option = ();
getopts "ap", \%option or usage;

my $matchdomain;
if ($option{p}) {
  usage unless not $option{a} and @ARGV == 1;
  my $passwdip;
  unless ($passwdip = checkip $ARGV[0]) {
    die "IP address $ARGV[0] is invalid\n";
  }
  unless ($privileged or checkipuser $passwdip) {
    die "IP address $passwdip does not belong to you\n";
  }
  $matchdomain = "-p $passwdip";
} elsif (not $option{a} and @ARGV == 1) {
  $matchdomain = $ARGV[0];
  unless ($matchdomain = checkdomain $matchdomain) {
    die "Domain $matchdomain is invalid\n";
  }
  unless ($privileged or checkdomainuser $matchdomain) {
    die "Domain $matchdomain does not belong to you\n";
  }
} elsif ($option{a} and @ARGV == 0) {
  $matchdomain = "-a";
} else {
  usage;
}

my $tempfile = new File::Temp;
system "/bin/mailconfig -r $matchdomain >$tempfile";
die "Failed to read mail configuration for editing\n" unless $? == 0;
while (1) {
  system $editor, $tempfile;
  die "Failed to edit mail configuration\n" unless $? == 0;
  system "/bin/mailconfig -ws $matchdomain <$tempfile";
  if ($? == 0) {
    print STDERR "Mail configuration successfully updated\n";
    exit;
  }
  warn "Errors in mail configuration; update failed! Return to editor? (y/n)\n";
  exit unless confirm;
}
